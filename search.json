[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Epistemology Vizualized",
    "section": "",
    "text": "This is a prototype website for the Epistemology Visualized project.\nCopyright 2025 Julien Dutant. Distributed under a GNU General Public License 3."
  },
  {
    "objectID": "index.html#aims",
    "href": "index.html#aims",
    "title": "Epistemology Vizualized",
    "section": "Aims",
    "text": "Aims\nThe project aims at providing open source, modular, interactive visualizations of important theorms and models in epistemology, starting with political epistemology."
  },
  {
    "objectID": "index.html#example",
    "href": "index.html#example",
    "title": "Epistemology Vizualized",
    "section": "Example",
    "text": "Example\nSee the Condorcet Jury Theorem page for a prototype."
  },
  {
    "objectID": "index.html#technicalities",
    "href": "index.html#technicalities",
    "title": "Epistemology Vizualized",
    "section": "Technicalities",
    "text": "Technicalities\n\nText: markdown and the occasional LaTeX for maths.\nCode: Javascript for lean and fast in-browser rendering. We could consider Wasm Python through Wasm, but doesn’t seem that easy yet.\nInteractive visualizations: Observable. Could consider others.\nDocument rendering: Quarto."
  },
  {
    "objectID": "index.html#github-page",
    "href": "index.html#github-page",
    "title": "Epistemology Vizualized",
    "section": "GitHub page",
    "text": "GitHub page\nSource code available on jdutant/ep-viz on GitHub."
  },
  {
    "objectID": "topics/condorcet.html",
    "href": "topics/condorcet.html",
    "title": "Condorcet Jury Theorem",
    "section": "",
    "text": "Condorcet’s (1785) Jury Theorem is the first “wisdom of the crowds” mathematical result."
  },
  {
    "objectID": "topics/condorcet.html#presentation",
    "href": "topics/condorcet.html#presentation",
    "title": "Condorcet Jury Theorem",
    "section": "Presentation",
    "text": "Presentation\nCondorcet’s Jury Theorem is a straightforward application of the “law of large numbers”. You’re probably familiar with some applications of the law. Say you’re throwing a die repeatedly, and let’s call faces 3,4,5 and 6 “high” outcomes. On each throw you have a 2/3 chance to get a “high” outcome. But as the number of throws increases, it becomes more and more likely that about 2/3 of our outcomes are high. (One important condition for this to hold is that the throws are independent: past outcomes don’t affect future ones.)\nCondorcet’s idea was that if members of a jury or an electorate are relevantly like dice, the majority rule is more likely to make good decisions than any individual member.\nConsider members of a group (jury, electorate) facing a question or decision with two options (guilty or not, candidate A or candidate B, etc.). Suppose it makes sense to consider one of the two options as in fact correct. For instance, if we’re judging guilt on a charge, the correct answer is ‘guilty’ if the person is guilty. Suppose next that electors somewhat reliable but not infallible: for simplicity, let’s assume each elector is exactly 2/3 likely of picking the correct answer. Suppose finally that electors are each deciding independently of each other. How likely it is that the majority picks the correct answer? If the group has only 1 member, the majority is just that single member, and the chance that they’ll pick the correct answer is 2/3 or about 66%. But if the group has 3 members, it is 20/27 or about 75%. The majority is more likely to be right than any individual members, and the likelihood that the majority is right increases quickly as the size of the group increases.\nLet’s visualize this."
  },
  {
    "objectID": "topics/condorcet.html#simulation",
    "href": "topics/condorcet.html#simulation",
    "title": "Condorcet Jury Theorem",
    "section": "Simulation",
    "text": "Simulation\nEach elector is assumed to have the same degree of competence, or likelihood of being correct (between 0, always wrong, and 1, always right). On the left is a visual representation of the electorate as scatter dots. electors who have voted correctly are in green, others in red. On the right is a tally of the result.\nUse sliders to change elector compentence and the number of electors. A new vote take place on any change in the sliders, or if you click the “Revote” button.\n\nviewof numElectors = Inputs.range(\n  [1, 10000], \n  {value: 50, step: 1, \n  transform: Math.log,\n  label: \"Number of electors:\"}\n)\nviewof indCompetence = Inputs.range(\n    [0,1],\n    {value: .55, step: 0.001, label: \"Individual elector competence\"}\n)\nviewof revote = Inputs.button(\"Revote\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { CondorcetElection } from \"./CondorcetElection.js\";\n\n// Wrapper activated when \"Revote\" is clicked\nfunction recreateElection(numElec,indCom,click) {\n  return new CondorcetElection(numElec,indCom);\n}\nvote = recreateElection(numElectors,indCompetence,revote)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { circleScatter } from \"./components/circleScatter.js\";\n\n// scatter plot parameters\nwidth = 480\ndot_radius = 4\n// fix a reasonable radius given nb electors\ndot_area = Math.PI * dot_radius^2 ;\ndesired_circle_area = dot_area * numElectors * 4\nradius_needed = Math.min(Math.sqrt( desired_circle_area / Math.PI ), width / 2);\n\npoints = circleScatter(vote.votes, {\n    center:[width / 2, width / 2],\n    radius:radius_needed, \n    coordinates:'cartesian'});\n\n// hack to fix the aspect ratio: multiply width by 1.5\nPlot.plot({\n   width: width * 1.5,\n   height: width,\n   marginTop: 0, marginRight: 0, marginBottom: 0, marginLeft:0,\n   label: null,\n   x: { domain: [0,width * 1.5], ticks: 0},\n   y: { domain: [0,width], ticks: 0},\n   marks: [\n     Plot.dot(points, {x: \"x\", y: \"y\", r: dot_radius, stroke: \"color\", fill: \"color\"}),\n   ],\n})\nresult = [\n  { Answer: \"Correct\", \n    color: \"green\",\n    Percentage: vote.percent * 100,\n  },\n  { Answer: \"Incorrect\", \n    color: \"red\",\n    Percentage: (1 - vote.percent) * 100\n  }\n]\n\nPlot.plot({\n  width: width / 3,\n  height: width / 2,\n  marks: [\n    Plot.barY(result, { x: \"Answer\", y: \"Percentage\", fill: \"color\" })\n  ],\n  y: { domain: [0,100], ticks: 10},\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote how the results becomes less and less volatile as the number of electors increases."
  }
]